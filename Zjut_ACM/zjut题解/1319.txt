#include<iostream>
using namespace std;
#define MAXN 100000
#define sig(x) ((x)>0?1:-1)
#define Abs(x) ((x)>0?(x):-(x))
#define _ufind_run(x) for(;p[t=Abs(x)];x=sig(x)*p[Abs(x)],p[t]=sig(p[t])*(p[Abs(x)]?p[Abs(x)]:Abs(p[t])))
#define _run_both _ufind_run(i);_ufind_run(j)
#define _set_side(x) p[Abs(i)]=sig(i)*(Abs(i)==Abs(j)?0:(x)*j)
#define _judge_side(x) (i==(x)*j&&i)

struct ufind{
	int p[MAXN+5],t;
	void init(){memset(p,0,sizeof(p));}
	int set_friend(int i,int j){_run_both;_set_side(1);return !_judge_side(-1);}
	int set_enemy(int i,int j){_run_both;_set_side(-1);return !_judge_side(1);}
	int is_friend(int i,int j){_run_both;return _judge_side(1);}
	int is_enemy(int i,int j){_run_both;return _judge_side(-1);}
	int find(int i){_ufind_run(i);return i;}
};
ufind U;
int num[MAXN+5],num1[MAXN+5],num2[MAXN+5],fir[MAXN+5],sec[MAXN+5];
int que[MAXN+5];
int edge[1000005][2];
char str[20];
int main()
{
	//freopen("1.txt","r",stdin);
	int zu;
	scanf("%d",&zu);
	while(zu--)
	{
		int m,n,a,b;
		scanf("%d%d ",&m,&n);
		bool f=true;
		U.init();
		for(int i=0;i<n;i++)
		{
			gets(str);
			edge[i][0]=0;int y=0;
			edge[i][1]=0;
			for(y=0;str[y]!=' ';y++)
				edge[i][0]=edge[i][0]*10+str[y]-'0';
			for(y++;str[y];y++)
				edge[i][1]=edge[i][1]*10+str[y]-'0';
		}
		for(int i=0;i<n;i++)
		{
			if (U.is_friend(edge[i][0],edge[i][1]))
			{
				f=false;break;
			}
			else
				U.set_enemy(edge[i][0],edge[i][1]);	
		}
		if (!f)
		{
			puts("lily is handsome!");
			continue;
		}
		memset(num,0,sizeof(num));
		memset(num1,0,sizeof(num1));
		memset(num2,0,sizeof(num2));
		for(int i=m;i>=1;i--)
		{
			int t=U.find(i);
			if(t>=0)
				num1[t]++,fir[t]=i;
			else
				num2[-t]++,sec[-t]=i;
		}
		for(int i=1;i<=m;i++)
		{
			if(num1[i]>num2[i])
				num[i]=1;
			else
				if(num1[i]==num2[i] &&fir[i]>sec[i])
					num[i]=1;
		}
		int p=0;
		for(int i=1;i<=m;i++)
		{
			int t=U.find(i);		
			int z=Abs(t);
			if( (t>0) ^num[z])
				que[p++]=i;
		}
		printf("%d\n",p);
		printf("%d",que[0]);
		for(int i=1;i<p;i++)
			printf(" %d",que[i]);
		puts("");
	}
}
