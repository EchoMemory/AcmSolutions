#include<iostream>
using namespace std;
struct squ
{
	int t,b,l,r;
	int col;
}a[1000];
int n;
int mapX[10000+5],mapY[10000+5];
int area[2500+5];
bool fX[10000+5],fY[10000+5];
int H,W,mapped_X,mapped_Y;
int X[2000+5],Y[2000+5];
int tot_col;

int C[4100];
int L[4100],R[4100];
bool F[4100];
int y;
void creat_tree(int ind,int l,int r)
{
	L[ind]=l;
	R[ind]=r;
	if (r==l+1) return ;
	creat_tree((ind<<1)+1,l,(l+r)>>1);
	creat_tree((ind<<1)+2,(l+r)>>1,r); 
}
void paint(int ind,int l,int r,int c)
{
	if (F[ind]) return ;
	if (L[ind]==l && R[ind]==r)
	{
		F[ind]=1;
		if (C[ind]==-1)
		{
			C[ind]=c;
			area[c]+=(X[R[ind]]-X[L[ind]])*(Y[y+1]-Y[y]);
			return ;
		}
	}
	C[ind]=0;
	int m=(R[ind]+L[ind])>>1;
	if (r<=m)
		paint((ind<<1)+1,l,r,c);
	else
		if (l>=m)
			paint((ind<<1)+2,l,r,c);
			else
			{
				paint((ind<<1)+1,l,m,c);
				paint((ind<<1)+2,m,r,c);
			}
	F[ind]=(F[(ind<<1)+2]&&F[(ind<<1)+1]);
}
int main()
{
//	freopen("1.txt","r",stdin);
//	freopen("2.txt","w",stdout);
	int zu;
	scanf("%d",&zu);
	int g=1;
	while(zu--)
	{
		printf("Case %d:\n",g++);
		int i,j,k;
		scanf("%d%d",&H,&W);
		memset(fX,false,sizeof(fY));
		memset(fY,false,sizeof(fX));
		scanf("%d",&n);
		for (i=0;i<n;i++)
		{
			scanf("%d%d%d%d%d",&a[i].t,&a[i].l,&a[i].b,&a[i].r,&a[i].col);
			fX[a[i].l]=true;
			fX[a[i].r]=true;
			fY[a[i].t]=true;
			fY[a[i].b]=true;
		}
		mapped_X=0;
		mapped_Y=0;
		for (i=0;i<=10000;i++)
		{
			if (fX[i])
			{
				mapX[i]=mapped_X;
				X[mapped_X++]=i;
			}
			if (fY[i])
			{
				mapY[i]=mapped_Y;
				Y[mapped_Y++]=i;
			}
		}
		creat_tree(0,0,mapped_X);
		tot_col=0;
		memset(area,0,sizeof(area));

		for (y=0;y<mapped_Y-1;y++)
		{
			memset(C,-1,sizeof(C));
			memset(F,0,sizeof(F));
			for (i=n-1;i>=0;i--)
				if (mapY[a[i].t]<=y && mapY[a[i].b]>y)
					paint(0,mapX[a[i].l],mapX[a[i].r],a[i].col);
		}
		area[1]=W*H;
		for (i=2;i<=2500;i++)
			area[1]-=area[i];
		for (i=1;i<=2500;i++)
			if (area[i])
				printf("%d %d\n",i,area[i]);
	}
}
